import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import tkinter as tk
from tkinter import filedialog, Label, Button
from PIL import Image, ImageTk

# ✅ Class names (should match the classes you trained your model on)
class_names = ['bacterial', 'corona virus', 'normal', 'tuberculosis', 'viral']

# ✅ Function to build the EfficientNetB0 model
def build_model():
    base_model = tf.keras.applications.EfficientNetB0(
        weights='imagenet',
        include_top=False,
        input_shape=(224, 224, 3)
    )

    base_model.trainable = True
    for layer in base_model.layers[:-20]:
        layer.trainable = False

    model = models.Sequential([
        base_model,
        layers.GlobalAveragePooling2D(),
        layers.Dense(512, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.02)),
        layers.BatchNormalization(),
        layers.Dropout(0.5),
        layers.Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.02)),
        layers.BatchNormalization(),
        layers.Dropout(0.5),
        layers.Dense(len(class_names), activation='softmax')
    ])
    return model

# ✅ Build the model and load the trained weights
model = build_model()
model.load_weights("trained_model_weights.h5")  # Make sure this path is correct

# ✅ Function to preprocess the image (including padding if needed)
def preprocess_image(image_path):
    img = load_img(image_path)
    img = img.resize((224, 224))  #  Resize.  If you did padding during training, apply padding here too.
    img_array = img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)  # (1, 224, 224, 3)
    return img_array

# ✅ Function to make a prediction
def predict(image_path):
    processed_image = preprocess_image(image_path)
    predictions = model.predict(processed_image)
    predicted_index = np.argmax(predictions[0])
    confidence = np.max(predictions[0]) * 100
    return class_names[predicted_index], confidence

# ✅ Tkinter UI functions
def select_image():
    file_path = filedialog.askopenfilename()  # Open file dialog
    if file_path:
        # Display the selected image
        img = Image.open(file_path)
        img = img.resize((250, 250))  # Resize for display in the UI
        img = ImageTk.PhotoImage(img)
        panel.configure(image=img)
        panel.image = img  # Keep a reference to prevent garbage collection

        # Make a prediction and display the result
        label, confidence = predict(file_path)
        result_label.config(text=f"Prediction: {label}\nConfidence: {confidence:.2f} %")

# ✅ Main function to initialize the Tkinter window
window = tk.Tk()
window.title("Lung Image Classifier")  # Set the window title
window.geometry("400x400")  # Set the window size

# Create a button to select an image
btn = Button(window, text="Select Image", command=select_image)
btn.pack(pady=10)  # Add padding around the button

# Create a label to display the image
panel = Label(window)
panel.pack()

# Create a label to display the prediction result
result_label = Label(window, text="Prediction result will be shown here", font=("Arial", 12))
result_label.pack(pady=10)

# Start the Tkinter event loop
window.mainloop()
